

function(nextApp){
	return function(request){
		var key = {};
		// instrument properties
		Object.defineProperty(request, 'pathInfo', { 
			get: function(){
				key.pathInfo = value;
			}
		});
		var stringKey = JSON.stringify(key);
		var cache = {};
		var response = cache[stringKey];
		if(!response){
			var response = cache[stringKey] = nextApp(request);
			
		}
	};
}
function update(){
	
}

}
	getKey(request);
	get(key);
	update
	
	
example:

function(nextApp){
	return function(request){
		return cache(request, function(request, invalidate){
			store.observe(invalidate)
			nextApp(request).observe(invalidate);
		}
	}
}

var cacheMap = {};
function cache(request, app) {
	var key = getKey(request);
	var response = cacheMap[key];
	if(!response){
		var response = app(instrument(request), getInvalidator(key));
		response.observe = function(callback) {
			response.observers.push(callback);
		};
	}
	
	function instrument() {
		
	}
}
function getInvalidator(key){
	return function(){
		var response = cacheMap[key];
		response.observers.forEach(function(callback){
			callback();
		});
		delete cacheMap[key];
	};
}