/**
 * Registers XRO media type
 */
var Media = require('../media').Media,
	when = require('promised-io/promise').when,
	JSONExt = require("perstore/util/json-ext"),
	StreamingSerializer = require("./json").StreamingSerializer,
	serializer = StreamingSerializer(JSONExt.stringify);

module.exports = Media({
	mediaType:"text/html",
	quality: 0.2,
	getQuality: function(object){
		return this.quality;
	},
	preamble: '<!DOCTYPE html>' +
		'<script src="/packages/dojo/dojo.js" defer data-dojo-config="async: true, deps:[\'xstyle/page\']"></script>' +
		'<style>@import "/client/ui.css";</style>' +
		'<pre id="content">\n',
	serialize: function(object, parameters, request){
		var preamble = this.preamble;
		return {
			forEach: function(write){
				write(preamble);
				return serializer(object, parameters, request).forEach(function(str){
					write(str.replace(/&|</g, function(character){
						return character == '<' ? '&lt;' : '&amp;';
					}));
				});
				function serialize(object, top){
					if(object && typeof object.forEach === "function"){
						write('[');
						return when(object.forEach(function(item){
							serialize(item);
						}), function(){
							write(']');
						});
					}else{
						if(!top){
							write('{');
						}
						Object.getOwnPropertyNames(object).forEach(function(name){
							write(name + ':');
							var value = object[name];
							if(typeof value == 'string'){
								// escape
								write(value.replace(/([;'":=\[\]\{\}\(\)])/g, '\\$1') + ';');
							}else if(typeof value =='object'){
								serialize(value);
							}else{
								write(value + ';');
							}
						});
						if(!top){
							write('};');
						}
					}
				}
				serialize(object, true);
			}
		}
	},
deserialize: function(inputStream, parameters){
		throw new Error("not implemented yet");
	}
});