/**
 * Registers JavaScript media type handling
 */
var JSONExt = require("perstore/util/json-ext"),
	StreamingSerializer = require("./json").StreamingSerializer,
	when = require("promised-io/promise").when,
	Media = require("../media").Media,
	forEachableToString = require("../media").forEachableToString,
	serializer = StreamingSerializer(JSONExt.stringify);
var lookForProperties = exports.lookForProperties = ["totalCount"];
Media({
	mediaType:"text/html",
	getQuality: function(object){
		return 0.9;
	},
	serialize: function serializer(value, parameters, request){
		if(request){
			write('<!DOCTYPE HTML>\n<html>\n<body>\n<div');
		}
		if(value instanceof Array){
			for(var i = 0, l = lookForProperties.length; i < l; i++){
				if(value[lookForProperties[i]]){
					// we found a property to attach to the array
					return {
						forEach: function(write){
							write("(function(){var v=");
							return when(serializer(value, parameters, request).forEach(write), function(){
								for(var i = 0, l = lookForProperties.length; i < l; i++){
									var prop = lookForProperties[i]; 
									if(value[prop]){
										write(";v." + prop + "=" + JSONExt.stringify(value[prop]));
									}
								}
								write(";return v;})()");
							});
						} 
					};
				}
			}
			return {
				forEach: function(write){
					write('>');
					return value.forEach(function(object){
						var itemTag = '<div itemscope';
						return when(serialize(object).forEach(write), function(){
							write('</div>');
						});
					});
				}
			}
		}
		return {
			forEach: function(write){
				var schema = value.getSchema();

				if(schema.type){
					itemTag += ' itemtype="' + schema.type + '"'
				}
				write(itemTag + '>');
				var keys = Object.keys(value);
				for(var i = 0, l = keys.length; i < l; i++){

					var propertyAttr = ' itemprop="' + i.replace(/&/g, '&amp;').replace(/"/g, '&quote;') + '"' +
							'>'
					var propertyValue = value[i];
					if(typeof propertyValue === 'object'){
						write('<div' + propertyAttr);
						return when(serialize(propertyValue), function(){
							write('</div>');
						});
					}
					write('<span' + propertyAttr);
					write(typeof propertyValue === 'string' ?
						propertyValue.replace(/&/g, '&amp;').replace(/"/g, '&quote;') :
						(propertyValue ++ ''));
				}
			}
		}
		return serializer(value, parameters, request);
	},
	deserialize: function(inputStream, parameters, request){
		return JSONExt.parse(forEachableToString(inputStream));
	}
});
